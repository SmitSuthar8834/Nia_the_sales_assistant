# Generated by Django 4.2.7 on 2025-08-07 11:01

import uuid

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("meeting_service", "0004_meetingquestion"),
    ]

    operations = [
        migrations.CreateModel(
            name="QuestionTemplate",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(help_text="Template name", max_length=255)),
                (
                    "industry",
                    models.CharField(help_text="Target industry", max_length=100),
                ),
                (
                    "template_type",
                    models.CharField(
                        choices=[
                            ("discovery", "Discovery Meeting"),
                            ("demo", "Demo Meeting"),
                            ("proposal", "Proposal Meeting"),
                            ("closing", "Closing Meeting"),
                            ("follow_up", "Follow-up Meeting"),
                        ],
                        help_text="Meeting type",
                        max_length=20,
                    ),
                ),
                (
                    "question_category",
                    models.CharField(
                        choices=[
                            ("pain_points", "Pain Point Questions"),
                            ("current_state", "Current State Questions"),
                            ("stakeholders", "Stakeholder Questions"),
                            ("requirements", "Requirements Questions"),
                            ("integration", "Integration Questions"),
                            ("budget", "Budget Questions"),
                            ("timeline", "Timeline Questions"),
                            ("decision_process", "Decision Process Questions"),
                            ("objection_handling", "Objection Handling Questions"),
                        ],
                        help_text="Question category",
                        max_length=20,
                    ),
                ),
                (
                    "question_template",
                    models.TextField(help_text="Question template with variables"),
                ),
                (
                    "variables",
                    models.JSONField(
                        default=list, help_text="List of template variables"
                    ),
                ),
                (
                    "rationale",
                    models.TextField(
                        help_text="Why this question is important for this industry"
                    ),
                ),
                (
                    "expected_responses",
                    models.JSONField(
                        default=list, help_text="Typical response patterns"
                    ),
                ),
                (
                    "follow_up_triggers",
                    models.JSONField(
                        default=list, help_text="Conditions that trigger follow-ups"
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(
                        default=5, help_text="Template priority (1-10)"
                    ),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        default=80.0, help_text="Confidence in template effectiveness"
                    ),
                ),
                (
                    "usage_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of times template has been used"
                    ),
                ),
                (
                    "success_rate",
                    models.FloatField(
                        default=0.0,
                        help_text="Success rate of questions generated from this template",
                    ),
                ),
                (
                    "company_size_filter",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Company sizes this template works best for",
                    ),
                ),
                (
                    "meeting_stage_filter",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Meeting stages where this template is most effective",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this template is active"
                    ),
                ),
                (
                    "is_ai_generated",
                    models.BooleanField(
                        default=True, help_text="Whether this template was AI-generated"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Question Template",
                "verbose_name_plural": "Question Templates",
                "ordering": ["-priority", "industry", "template_type"],
                "indexes": [
                    models.Index(
                        fields=["industry", "template_type"],
                        name="meeting_ser_industr_57851e_idx",
                    ),
                    models.Index(
                        fields=["question_category", "priority"],
                        name="meeting_ser_questio_50e704_idx",
                    ),
                    models.Index(
                        fields=["is_active", "success_rate"],
                        name="meeting_ser_is_acti_60ee5b_idx",
                    ),
                ],
                "unique_together": {
                    (
                        "industry",
                        "template_type",
                        "question_category",
                        "question_template",
                    )
                },
            },
        ),
        migrations.CreateModel(
            name="QuestionEffectivenessLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "effectiveness_score",
                    models.FloatField(help_text="Overall effectiveness score (0-100)"),
                ),
                (
                    "effectiveness_tier",
                    models.CharField(
                        choices=[
                            ("high", "High Effectiveness"),
                            ("medium", "Medium Effectiveness"),
                            ("low", "Low Effectiveness"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "response_quality_score",
                    models.FloatField(
                        default=0.0, help_text="Quality of response received"
                    ),
                ),
                (
                    "information_value_score",
                    models.FloatField(
                        default=0.0, help_text="Value of information gathered"
                    ),
                ),
                (
                    "engagement_score",
                    models.FloatField(
                        default=0.0, help_text="Level of engagement generated"
                    ),
                ),
                (
                    "objective_advancement_score",
                    models.FloatField(
                        default=0.0, help_text="Progress toward meeting objectives"
                    ),
                ),
                (
                    "pain_point_discovery_score",
                    models.FloatField(
                        default=0.0, help_text="Pain point discovery effectiveness"
                    ),
                ),
                (
                    "process_advancement_score",
                    models.FloatField(
                        default=0.0, help_text="Sales process advancement"
                    ),
                ),
                (
                    "response_text",
                    models.TextField(help_text="The actual response received"),
                ),
                (
                    "response_word_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Word count of response"
                    ),
                ),
                (
                    "response_depth",
                    models.CharField(
                        default="moderate", help_text="Depth of response", max_length=20
                    ),
                ),
                (
                    "buying_signals_identified",
                    models.JSONField(
                        default=list, help_text="Buying signals identified in response"
                    ),
                ),
                (
                    "concerns_raised",
                    models.JSONField(
                        default=list, help_text="Concerns or objections raised"
                    ),
                ),
                (
                    "question_timing",
                    models.CharField(
                        help_text="When in the meeting the question was asked",
                        max_length=50,
                    ),
                ),
                (
                    "conversation_context",
                    models.JSONField(
                        default=dict, help_text="Context when question was asked"
                    ),
                ),
                (
                    "lead_engagement_level",
                    models.CharField(
                        default="medium",
                        help_text="Lead engagement level",
                        max_length=20,
                    ),
                ),
                (
                    "what_worked_well",
                    models.JSONField(
                        default=list, help_text="What aspects worked well"
                    ),
                ),
                (
                    "improvement_opportunities",
                    models.JSONField(default=list, help_text="Areas for improvement"),
                ),
                (
                    "context_factors",
                    models.JSONField(
                        default=list,
                        help_text="Contextual factors that influenced effectiveness",
                    ),
                ),
                (
                    "replication_potential",
                    models.JSONField(
                        default=list, help_text="How to replicate success"
                    ),
                ),
                (
                    "question_modifications",
                    models.JSONField(
                        default=list, help_text="Suggested question improvements"
                    ),
                ),
                (
                    "timing_adjustments",
                    models.JSONField(
                        default=list, help_text="Better timing recommendations"
                    ),
                ),
                (
                    "follow_up_suggestions",
                    models.JSONField(
                        default=list, help_text="Recommended follow-up approaches"
                    ),
                ),
                (
                    "led_to_qualification",
                    models.BooleanField(
                        default=False, help_text="Whether question helped qualify lead"
                    ),
                ),
                (
                    "led_to_objection",
                    models.BooleanField(
                        default=False, help_text="Whether question surfaced objections"
                    ),
                ),
                (
                    "generated_follow_ups",
                    models.BooleanField(
                        default=False, help_text="Whether question generated follow-ups"
                    ),
                ),
                (
                    "moved_deal_forward",
                    models.BooleanField(
                        default=False, help_text="Whether question moved deal forward"
                    ),
                ),
                ("logged_at", models.DateTimeField(auto_now_add=True)),
                ("analyzed_at", models.DateTimeField(auto_now=True)),
                (
                    "meeting",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="question_effectiveness_logs",
                        to="meeting_service.meeting",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="effectiveness_logs",
                        to="meeting_service.meetingquestion",
                    ),
                ),
            ],
            options={
                "verbose_name": "Question Effectiveness Log",
                "verbose_name_plural": "Question Effectiveness Logs",
                "ordering": ["-logged_at"],
                "indexes": [
                    models.Index(
                        fields=["question", "effectiveness_score"],
                        name="meeting_ser_questio_21cd08_idx",
                    ),
                    models.Index(
                        fields=["meeting", "effectiveness_tier"],
                        name="meeting_ser_meeting_74e1b6_idx",
                    ),
                    models.Index(
                        fields=["logged_at", "effectiveness_score"],
                        name="meeting_ser_logged__7ef216_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ConversationFlow",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "questions_asked_sequence",
                    models.JSONField(
                        default=list, help_text="Sequence of questions asked"
                    ),
                ),
                (
                    "response_quality_progression",
                    models.JSONField(
                        default=list, help_text="Quality of responses over time"
                    ),
                ),
                (
                    "engagement_progression",
                    models.JSONField(
                        default=list, help_text="Engagement level over time"
                    ),
                ),
                (
                    "optimal_sequence_score",
                    models.FloatField(
                        default=0.0, help_text="How optimal the question sequence was"
                    ),
                ),
                (
                    "conversation_momentum",
                    models.CharField(
                        default="stable",
                        help_text="Conversation momentum",
                        max_length=20,
                    ),
                ),
                (
                    "peak_engagement_point",
                    models.IntegerField(
                        blank=True,
                        help_text="Question number with peak engagement",
                        null=True,
                    ),
                ),
                (
                    "adaptations_made",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of real-time adaptations made"
                    ),
                ),
                (
                    "adaptation_effectiveness",
                    models.FloatField(
                        default=0.0, help_text="Effectiveness of adaptations made"
                    ),
                ),
                (
                    "successful_transitions",
                    models.JSONField(
                        default=list, help_text="Successful question transitions"
                    ),
                ),
                (
                    "problematic_transitions",
                    models.JSONField(
                        default=list, help_text="Problematic question transitions"
                    ),
                ),
                (
                    "missed_opportunities",
                    models.JSONField(
                        default=list, help_text="Missed follow-up opportunities"
                    ),
                ),
                (
                    "conversion_correlation",
                    models.FloatField(
                        default=0.0, help_text="Correlation between flow and conversion"
                    ),
                ),
                (
                    "information_gathering_score",
                    models.FloatField(
                        default=0.0,
                        help_text="Overall information gathering effectiveness",
                    ),
                ),
                ("flow_started_at", models.DateTimeField(auto_now_add=True)),
                ("flow_completed_at", models.DateTimeField(blank=True, null=True)),
                ("analyzed_at", models.DateTimeField(auto_now=True)),
                (
                    "meeting",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="conversation_flow",
                        to="meeting_service.meeting",
                    ),
                ),
            ],
            options={
                "verbose_name": "Conversation Flow",
                "verbose_name_plural": "Conversation Flows",
                "indexes": [
                    models.Index(
                        fields=["meeting", "optimal_sequence_score"],
                        name="meeting_ser_meeting_3b5f1d_idx",
                    ),
                    models.Index(
                        fields=[
                            "conversion_correlation",
                            "information_gathering_score",
                        ],
                        name="meeting_ser_convers_f90721_idx",
                    ),
                ],
            },
        ),
    ]
