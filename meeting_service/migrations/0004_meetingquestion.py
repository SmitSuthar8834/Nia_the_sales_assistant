# Generated by Django 4.2.7 on 2025-08-07 08:33

import uuid

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("meeting_service", "0003_meeting"),
    ]

    operations = [
        migrations.CreateModel(
            name="MeetingQuestion",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "question_text",
                    models.TextField(help_text="The actual question to ask"),
                ),
                (
                    "question_type",
                    models.CharField(
                        choices=[
                            ("discovery", "Discovery"),
                            ("budget", "Budget Qualification"),
                            ("timeline", "Timeline & Urgency"),
                            ("decision_makers", "Decision Makers"),
                            ("pain_points", "Pain Point Discovery"),
                            ("requirements", "Requirements Qualification"),
                            ("competition", "Competitive Analysis"),
                            ("current_solution", "Current Solution Assessment"),
                            ("objection_handling", "Objection Handling"),
                            ("closing", "Closing Questions"),
                        ],
                        help_text="Category of question",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(
                        default=5,
                        help_text="Priority ranking (1-10, higher is more important)",
                    ),
                ),
                (
                    "priority_level",
                    models.CharField(
                        choices=[
                            ("high", "High Priority"),
                            ("medium", "Medium Priority"),
                            ("low", "Low Priority"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                (
                    "ai_generated",
                    models.BooleanField(
                        default=True, help_text="Whether this question was AI-generated"
                    ),
                ),
                (
                    "generation_context",
                    models.JSONField(
                        default=dict, help_text="Context used for AI generation"
                    ),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        default=0.0,
                        help_text="AI confidence in question relevance (0-100)",
                    ),
                ),
                (
                    "target_persona",
                    models.CharField(
                        blank=True,
                        help_text="Target persona or role for this question",
                        max_length=100,
                    ),
                ),
                (
                    "industry_specific",
                    models.BooleanField(
                        default=False, help_text="Whether question is industry-specific"
                    ),
                ),
                (
                    "asked_at",
                    models.DateTimeField(
                        blank=True, help_text="When this question was asked", null=True
                    ),
                ),
                (
                    "response",
                    models.TextField(
                        blank=True, help_text="Response received to this question"
                    ),
                ),
                (
                    "response_quality",
                    models.CharField(
                        blank=True,
                        help_text="Quality of response received",
                        max_length=20,
                    ),
                ),
                (
                    "follow_up_questions",
                    models.JSONField(
                        default=list,
                        help_text="Suggested follow-up questions based on response",
                    ),
                ),
                (
                    "triggers_follow_up",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this question should trigger follow-ups",
                    ),
                ),
                (
                    "effectiveness_score",
                    models.FloatField(
                        blank=True,
                        help_text="Effectiveness score based on outcomes",
                        null=True,
                    ),
                ),
                (
                    "led_to_qualification",
                    models.BooleanField(
                        default=False,
                        help_text="Whether question helped qualify the lead",
                    ),
                ),
                (
                    "led_to_objection",
                    models.BooleanField(
                        default=False, help_text="Whether question surfaced objections"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "sequence_order",
                    models.PositiveIntegerField(
                        default=0, help_text="Order in which question should be asked"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created/approved this question",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "depends_on_question",
                    models.ForeignKey(
                        blank=True,
                        help_text="Question that should be asked before this one",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="meeting_service.meetingquestion",
                    ),
                ),
                (
                    "meeting",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to="meeting_service.meeting",
                    ),
                ),
            ],
            options={
                "verbose_name": "Meeting Question",
                "verbose_name_plural": "Meeting Questions",
                "ordering": ["sequence_order", "-priority", "question_type"],
                "indexes": [
                    models.Index(
                        fields=["meeting", "question_type"],
                        name="meeting_ser_meeting_c060b6_idx",
                    ),
                    models.Index(
                        fields=["priority", "sequence_order"],
                        name="meeting_ser_priorit_61adb8_idx",
                    ),
                    models.Index(
                        fields=["ai_generated", "confidence_score"],
                        name="meeting_ser_ai_gene_6ec89d_idx",
                    ),
                ],
            },
        ),
    ]
